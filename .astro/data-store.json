[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.12.9","content-config-digest","bbca2a529431176f","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://jon.haddow.me\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":true,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"rawEnvValues\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,29,30,43,44,56,57],"benefits-of-css-in-js",{"id":11,"data":13,"body":24,"filePath":25,"digest":26,"legacyId":27,"deferredRender":28},{"title":14,"abstract":15,"date":16,"featuredImage":17,"tags":18},"Benefits of CSS-in-JS","5 reasons why you should consider writing CSS within your JSX",["Date","2020-07-29T00:00:00.000Z"],"./images/featured-image.jpg",[19,20,21,22,23],"css","styling","css-in-js","javascript","emotion","Traditionally CSS is constructed in separate files to JavaScript. There are good reasons for keeping those separate but I want to list some benefits to consider when building CSS inline with your code.\n\nBefore looking at those benefits, if you haven't come across CSS-in-JS before, it looks something like this:\n\n```jsx\nconst title = () => (\n  \u003Ch1\n    css={{\n      paddingTop: 16,\n      fontSize: \"2rem\",\n      fontWeight: 400,\n      color: \"red\",\n    }}\n  >\n    Oooo look at me!\n  \u003C/h1>\n);\n```\n\nI spent some time trying out a CSS-in-JS library called [Emotion](https://emotion.sh). In fact I wrote all the styling on this page with it (You can check it out on [GitHub](https://github.com/jonhaddow/website)). I wanted to highlight a few things I think improve the development of a application, when using CSS-in-JS.\n\n## 1. No dead code\n\nWith CSS-in-JS, when you delete a component (or just part of a component), the css is removed along with it. I've worked in many projects where hundreds of lines of legacy CSS has been left around long after a feature has been removed. CSS in isolation is often so loosely coupled from its original intent, that it becomes difficult to remove in case there are unexpected side effects (see the issue of [append only stylesheets!](https://css-tricks.com/oh-no-stylesheet-grows-grows-grows-append-stylesheet-problem/)). Dead code not only adds to technical debt within your project, but will also increase the size of the CSS files your users are downloading.\n\n## 2. No class names\n\nIf there is a way to avoid having to think up variable names, I'm all for it! CSS by design is globally scoped and therefore class names need careful consideration to ensure they are not duplicated elsewhere. However with CSS-in-JS, there isn't a need to come up with class names. They will be generated for you during the compilation process.\n\n## 3. Greater confidence\n\nIf I spot an issue with a component's styling, I can simply go to that component and confidently modify, add or remove styles without worrying about side effects on other components. It also makes the experience much faster to debug and resolve styling bugs. I don't need to track various class names and span through css files to find the styles which apply.\n\n## 4. Easy refactoring\n\nWith CSS-in-JS, if I need to split out a large component I directly move the components between files and the styling comes along with it. With separate CSS files, I may need to add new CSS files and move parts of the styling around to match the JavaScript file structure.\n\n## 5. Better tooling\n\nThere is arguablely better tooling available with CSS-in-JS as JavaScript (or TypeScript) is used to enforce best practices and spot issues early in development. For example, you'll often find that these libraries (like Emotion) will have type definitions to allow VSCode to auto-complete css properties. If you're using TypeScript you may even get compilation errors highlighting mispelt css properties or invalid values.\n\n---\n\nCSS is, for me, the least exciting part of building an application. So if you take anything from this article, I hope CSS-in-JS is considered as a fun, easier, and more interesting approach to try on your next project.","src/content/blog/benefits-of-css-in-js/index.mdx","a13ce419bd78d7ae","benefits-of-css-in-js/index.mdx",true,"form-building-with-react-hook-form",{"id":29,"data":31,"body":39,"filePath":40,"digest":41,"legacyId":42,"deferredRender":28},{"title":32,"date":33,"featuredImage":34,"tags":35},"Form building with React Hook Form",["Date","2020-06-30T00:00:00.000Z"],"./images/featured-image.jpeg",[36,37,38,22],"react","react-hook-form","forms","_Note: This article was written with React Hook Form v5. The library may have changed since the time of writing._\n\nWithin a React application, you may come across a scenario where you want to capture user input. This could be a \"Contact Us\" form for a blog, a questionnaire, or perhaps an authoring environment for an Event you want to share.\n\nTo handle this in React, one approach is to set up a state object, construct inputs, and attach onClick listeners for each field. The form data can be collected from the components state and processed on form submission. This starts off simple, but can lead of complications when handling validation.\n\nThis is where a library like [React Hook Form](https://react-hook-form.com/) comes into play. It relies heavily on [uncontrolled inputs](https://reactjs.org/docs/uncontrolled-components.html) which tend to perform better than controlled. It also handles validation well.\n\nReact Hook Form has a simple, but powerful API. This article explores that by setting up a form for an Event. We'll cover registering inputs, using Controllers (for custom/third-party inputs) and form validation.\n\n---\n\nThis Event form will include:\n\n- a _title_ - a plain text input\n- a _description_- a multiline text area, and\n- a _start/end date and time_ - a [3rd party date picker](https://github.com/Hacker0x01/react-datepicker)\n\nFirst lets setup a new React application (use [Create React App](https://create-react-app.dev/) to speed up this process), then install `react-hook-form` and `react-datepicker` for the date picker.\n\nWe'll start by building out the JSX for our form.\n\n```jsx\nexport const Form = () => {\n  const [startDate, setStartDate] = React.useState(null);\n  const [endDate, setEndDate] = React.useState(null);\n\n  return (\n    \u003Cdiv className=\"layout\">\n      \u003Ch1>My Event Form\u003C/h1>\n      \u003Cform>\n        \u003Cdiv className=\"form-section\">\n          \u003Clabel htmlFor=\"title\" className=\"form-label\">\n            Title\n          \u003C/label>\n          \u003Cinput id=\"title\" name=\"title\" type=\"text\" />\n        \u003C/div>\n        \u003Cdiv className=\"form-section\">\n          \u003Clabel htmlFor=\"description\" className=\"form-label\">\n            Description\n          \u003C/label>\n          \u003Ctextarea id=\"description\" name=\"description\" />\n        \u003C/div>\n        \u003Cdiv className=\"form-section\">\n          \u003Clabel htmlFor=\"startDate\" className=\"form-label\">\n            Start Date\n          \u003C/label>\n          \u003CDatePicker\n            id=\"startDate\"\n            name=\"startDate\"\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            minDate={new Date()}\n            showTimeSelect\n            dateFormat=\"Pp\"\n            selectsStart\n            startDate={startDate}\n            endDate={endDate}\n          />\n        \u003C/div>\n        \u003Cdiv className=\"form-section\">\n          \u003Clabel htmlFor=\"endDate\" className=\"form-label\">\n            End Date\n          \u003C/label>\n          \u003CDatePicker\n            id=\"endDate\"\n            name=\"endDate\"\n            selected={endDate}\n            onChange={(date) => setEndDate(date)}\n            minDate={startDate || new Date()}\n            showTimeSelect\n            dateFormat=\"Pp\"\n            selectsEnd\n            startDate={startDate}\n            endDate={endDate}\n          />\n        \u003C/div>\n        \u003Cbutton type=\"submit\">Submit\u003C/button>\n      \u003C/form>\n    \u003C/div>\n  );\n};\n```\n\nNow we'll need to add React Hook Form's `useForm` hook and deconstruct the `handleSubmit` and `register` functions from it.\n\nWe'll pass `register` to each form input `ref` prop. Let's just cover the title and description for now, and we'll leave the date picker to be handled separately.\n\nWe'll setup an `onSubmit` function to print the data returned from `handleSubmit`. Here's how our code will look now:\n\n```jsx {6,15,20,26}\nexport const Form = () => {\n  const [startDate, setStartDate] = React.useState(null);\n  const [endDate, setEndDate] = React.useState(null);\n  const [submittedData, setSubmittedData] = React.useState({});\n\n  const { handleSubmit, register } = useForm();\n\n  const onSubmit = (data) => {\n    setSubmittedData(data);\n  };\n\n  return (\n    \u003Cdiv className=\"layout\">\n      \u003Ch1>My Event Form\u003C/h1>\n      \u003Cform onSubmit={handleSubmit(onSubmit)}>\n        \u003Cdiv className=\"form-section\">\n          \u003Clabel htmlFor=\"title\" className=\"form-label\">\n            Title\n          \u003C/label>\n          \u003Cinput id=\"title\" name=\"title\" type=\"text\" ref={register} />\n        \u003C/div>\n        \u003Cdiv className=\"form-section\">\n          \u003Clabel htmlFor=\"description\" className=\"form-label\">\n            Description\n          \u003C/label>\n          \u003Ctextarea id=\"description\" name=\"description\" ref={register} />\n        \u003C/div>\n        \u003Cdiv className=\"form-section\">\n          \u003Clabel htmlFor=\"startDate\" className=\"form-label\">\n            Start Date\n          \u003C/label>\n          \u003CDatePicker\n            id=\"startDate\"\n            name=\"startDate\"\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            minDate={new Date()}\n            showTimeSelect\n            dateFormat=\"Pp\"\n            selectsStart\n            startDate={startDate}\n            endDate={endDate}\n          />\n        \u003C/div>\n        \u003Cdiv className=\"form-section\">\n          \u003Clabel htmlFor=\"endDate\" className=\"form-label\">\n            End Date\n          \u003C/label>\n          \u003CDatePicker\n            id=\"endDate\"\n            name=\"endDate\"\n            selected={endDate}\n            onChange={(date) => setEndDate(date)}\n            minDate={startDate || new Date()}\n            showTimeSelect\n            dateFormat=\"Pp\"\n            selectsEnd\n            startDate={startDate}\n            endDate={endDate}\n          />\n        \u003C/div>\n        \u003Cbutton type=\"submit\">Submit\u003C/button>\n      \u003C/form>\n      \u003Cp>Submitted data:\u003C/p>\n      \u003Cpre>{JSON.stringify(submittedData, null, 2)}\u003C/pre>\n    \u003C/div>\n  );\n};\n```\n\nGive that form a try in the browser. You'll notice the title and description values are printed when the form is submitted, however the start and end dates haven't yet been handled.\n\n## Controlled inputs\n\nThe 3rd party library used to render these date pickers, aren't using native html form inputs. This means that React Hook Form wouldn't know how to capture the data. These are **controlled** inputs. To handle them, React Hook Form provides a [Controller](https://react-hook-form.com/api#Controller) wrapper component.\n\nLet's try to wrap our start date picker in a Controller:\n\n```jsx\n\u003CController\n  as={\n    \u003CDatePicker\n      id=\"startDate\"\n      minDate={new Date()}\n      showTimeSelect\n      dateFormat=\"Pp\"\n      selectsStart\n      startDate={startDate}\n      endDate={endDate}\n    />\n  }\n  name=\"startDate\"\n  control={control}\n  valueName=\"selected\"\n/>\n```\n\nThe key changes that have been made are:\n\n- the name has been moved up to the Controller. This is so that React Hook Form can track the name of the property and it's value.\n- a control function (which comes from the `useForm` hook) has been passed into the Controller's `control` prop.\n- the `selected` prop on the DatePicker (which was set to the currently selected date/time) has been removed, and the `valueName` prop on the Controller is set to \"selected\". This is telling React Hook Form that the name of the property that is anticipating the current form value, is not \"value\" but rather \"selected\". In a similar way, if DatePicker had an `onEdit` method instead of an `onChange` method, then we'd have to specific that change with the `onChangeName` prop on the Controller. By default React Hook Form expects the controlled input to have a `value` prop and a `onChange` prop. If that's not the case, we need to specify. This is why the `onChange` prop has also been removed from the internal DatePicker component.\n\nThese are the main parts needed to hook an external component into our form. Once the end date picker is also wrapped in a Controller, we'll be able to see the data submitted along with the title and description.\n\nThe value of the `startDate` and `endDate` doesn't need to be stored in state anymore, as React Hook Form will keep track of it for us. You can replace\n\n```javascript\nconst [startDate, setStartDate] = React.useState(null);\nconst [endDate, setEndDate] = React.useState(null);\n```\n\nwith\n\n```javascript\nconst { handleSubmit, register, watch } = useForm();\nconst { startDate, endDate } = watch([\"startDate\", \"endDate\"]);\n```\n\nWatch is used to listen to those particular values that are stored on the form.\n\n## Validation\n\nBefore the user submits our form, let's add some basic validation checks. Here's our criteria:\n\n- The title must be provided, and less than 30 characters\n- The description must be less than 100 characters\n- The start date must not be on the 13th 👻 (sorry, just wanted an interesting example...)\n\nReact Hook Form provides a simple way to define these rules through the `register` function. Here's how we'd define the title validation:\n\n```jsx\n\u003Cinput\n  id=\"title\"\n  name=\"title\"\n  type=\"text\"\n  ref={register({\n    required: { message: \"The title is required\", value: true },\n    maxLength: {\n      message: \"The title must be less than 30 characters\",\n      value: 30,\n    },\n  })}\n/>\n```\n\nWhen the user submits the form and one of the fields is invalid, the `handleSubmit` function (on the form `onSubmit` prop) doesn't trigger the method passed in, but rather updates the `errors` object that's returned from the `useForm` hook.\n\nSo we want to use this `errors` object to give visual feedback to the user on what needs to be fixed. Something like this does the job:\n\n```jsx {17}\n\u003Cdiv className=\"form-section\">\n  \u003Clabel htmlFor=\"title\" className=\"form-label\">\n    Title\n  \u003C/label>\n  \u003Cinput\n    id=\"title\"\n    name=\"title\"\n    type=\"text\"\n    ref={register({\n      required: { message: \"The title is required\", value: true },\n      maxLength: {\n        message: \"The title must be less than 30 characters\",\n        value: 30,\n      },\n    })}\n  />\n  {errors.title && \u003Cspan className=\"error\">{errors.title.message}\u003C/span>}\n\u003C/div>\n```\n\nTo cover the description, we'd have a similar rule set to the title:\n\n```javascript\nregister({\n  maxLength: {\n    message: \"The description must have less than 100 characters\",\n    value: 100,\n  },\n});\n```\n\nFor the start date, we'll need to use React Hook Form's custom `validate` function to check that the value isn't on the 13th. We'll need to pass these rules into the Controller's `rules` prop\n\n```jsx {21-26}\n\u003Cdiv className=\"form-section\">\n  \u003Clabel htmlFor=\"startDate\" className=\"form-label\">\n    Start Date\n  \u003C/label>\n  \u003CController\n    as={\n      \u003CDatePicker\n        id=\"startDate\"\n        onChange={(date) => setStartDate(date)}\n        minDate={new Date()}\n        showTimeSelect\n        dateFormat=\"Pp\"\n        selectsStart\n        startDate={startDate}\n        endDate={endDate}\n      />\n    }\n    name=\"startDate\"\n    control={control}\n    valueName=\"selected\"\n    rules={{\n      validate: (data) => {\n        const date = new Date(data);\n        return date.getDate() !== 13;\n      },\n    }}\n  />\n  {errors.startDate && (\n    \u003Cspan className=\"error\">The start date must not be on the 13th!\u003C/span>\n  )}\n\u003C/div>\n```\n\nYou can read more about the rules available in [React Hook Form's documentation](https://react-hook-form.com/api#register).\n\n---\n\nYou can check out the code for this example form [on GitHub](https://github.com/jonhaddow/event-form).\n\nI hope this article gets you more familar with how you can put together a simple form in React.","src/content/blog/form-building-with-react-hook-form/index.mdx","1384b06fc3c9b85e","form-building-with-react-hook-form/index.mdx","setup-react-with-webpack",{"id":43,"data":45,"body":52,"filePath":53,"digest":54,"legacyId":55,"deferredRender":28},{"title":46,"date":47,"featuredImage":17,"tags":48},"Building a React application with webpack",["Date","2020-10-13T00:00:00.000Z"],[49,50,51,22,36],"webpack","build","tools","[React](https://reactjs.org) is currently the most popular, modern UI framework for the web.\n\nIt's well known for its functional, declarative style and I would argue it's really easy pick up as a new developer.\n\nThe structure of an React application (especially with its [JSX syntax](https://reactjs.org/docs/introducing-jsx.html)) feels close to HTML, so it's easy to follow logic.\n\nIt's well worth trying React if you are a developer or are interested in learning front-end development.\n\n---\n\nWhen first building a React application you have a few options available.\n\n- You can add a couple script tags to the HTML and then React should work.\n  However this isn't the recommended approach for a production site.\n- You can also run `npx create-react-app my-app` to have [Create React App](https://github.com/facebookincubator/create-react-app)\n  automatically setup a project for you with all the tools you need under the hood.\n- You can build the tooling yourself and learn more about how the tools work.\n\nI tend to recommend the last option as knowing your tools enhances your ability as a developer.\n\nThe rest of this post will cover how to setup a React application with the build tool, [webpack](https://webpack.js.org).\n\nI have covered how to build JavaScript, HTML, and CSS using webpack in a [previous post](https://jon.haddow.me/blog/basic-setup-for-a-web-application), so that is worth reading first if unfamiliar.\n\n---\n\n## Prerequisites\n\n- Install [Node.js](https://nodejs.org/en/download/) to allow you to install and run JavaScript packages.\n\n## Steps\n\nThe two React dependencies we'll need to install is `react` and `react-dom`. So setup a new repository, run `npm init` to setup the `package.json`, then run `npm install react react-dom`.\n\nNext, we'll create a file `/src/index.js` (this will be the application's entry point) with the following content:\n\n```jsx\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.jsx\";\n\nReactDOM.render(\u003CApp />, document.getElementById(\"root\"));\n```\n\nthen we'll create our `App` component in `/src/App.jsx` which prints a joyful message to brighten your day:\n\n```jsx\nimport React from \"react\";\n\nconst App = () => {\n  return \u003Ch1>🎵 I can see clearly now the rain has gone! 🎵\u003C/h1>;\n};\n\nexport default App;\n```\n\nLets create a HTML template in `/src/assets/index.html`:\n\n```html\n\u003C!doctype html>\n\u003Chtml lang=\"en\">\n  \u003Chead>\n    \u003Cmeta charset=\"UTF-8\" />\n    \u003Cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    \u003Ctitle>My app\u003C/title>\n  \u003C/head>\n\n  \u003Cbody>\n    \u003Cdiv id=\"root\">\u003C/div>\n  \u003C/body>\n\u003C/html>\n```\n\nWe'll setup webpack to use this HTML template and inject the JavaScript bundle once built.\n\nReact uses the latest Javascript syntax which needs compilation to make it friendly for all browsers. We'll also need to configure this within webpack.\n\nLets start by installing `webpack` and `webpack-cli` to bring in the basic webpack tooling for running a local development server.\n\n> _Note: For this tutorial, I'm using webpack v5.x and webpack-cli v4.x._\n\nWe'll also need to install `html-webpack-plugin` for embeding the bundled javascript into our html template.\n\nWe can then add a file to the root of the project called `webpack.config.js` with the following configuration:\n\n```javascript\nvar HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: \"./src/assets/index.html\",\n    }),\n  ],\n};\n```\n\nAdd a script to the `package.json`:\n\n```json\n{\n\t...\n\t\"scripts\": {\n\t\t\"start\": \"webpack serve\"\n\t}\n\t...\n}\n```\n\nthen run `npm start`. This will give us a lovely... error 😞\n\nWe need a loader to handle the funky JSX syntax from React. We'll use [Babel](https://babeljs.io) for this.\n\nInstall the following packages:\n\n- `babel-loader` (for hooking up babel compilation into webpack),\n- `@babel/core` (the core babel package),\n- `@babel/preset-env` and `@babel/preset-react` (Babel presets for next generation JavaScript and for React).\n\nNext we'll update the webpack config to look like this:\n\n```javascript\nvar HtmlWebpackPlugin = require(\"html-webpack-plugin\");\n\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.jsx?/,\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"@babel/preset-env\", \"@babel/preset-react\"],\n          },\n        },\n      },\n    ],\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: \"./src/assets/index.html\",\n    }),\n  ],\n};\n```\n\nHere we are giving webpack a set of rules on how to handle `.jsx` and `.js` files. We want webpack to use the `babel-loader` to compile our JS files and we've specified to use the 2 presets we've installed to do it.\n\nWhen you run `npm start` now, it should show up nicely in the browser: http://localhost:8080\n\n---\n\nThere you go, you're setup and ready to build a react app.\n\nYou'll likely want to import CSS (or SASS). For that, check out my [other tutorial](https://jon.haddow.me/blog/basic-setup-for-a-web-application), or have a browse at some [webpack loaders](https://webpack.js.org/loaders/) on their site.","src/content/blog/setup-react-with-webpack/index.mdx","9c5607f908993da3","setup-react-with-webpack/index.mdx","tailwind-favourite-way-to-style",{"id":56,"data":58,"body":63,"filePath":64,"digest":65,"legacyId":66,"deferredRender":28},{"title":59,"date":60,"featuredImage":17,"tags":61},"Tailwind CSS - my favourite way to style a site",["Date","2021-06-06T00:00:00.000Z"],[22,62,19,20],"tailwind","I've recently stumbled across [Tailwind CSS](https://tailwindcss.com/).\n\nInitially I thought this was a similar framework to [Bootstrap](https://getbootstrap.com/) which I found to be centred around component based classes (`btn` and `btn-warning`) and not helpful in making a site look _unique_.\n\nTailwind instead is a _utility-based framework_ which makes it highly flexible for **any** site. Each class they provide maps to a specific CSS style.\n\nFor example `flex` becomes `display: flex;` and `text-left` becomes `text-align: left;`\n\nThese classes can be applied to any component on your site.\n\nTailwind can cover every style you can think of, giving you little reason to have CSS directly in your code anymore.\n\nMy favourite reasons to use Tailwind:\n\n- **There are no magic numbers, everything is part of a design system.** You don't need to remember that the header had a font size of 18px, but rather that all components with `text-lg` will have the same size. Having a predefined design system makes it a lot easier to build visually consistant UIs.\n- **Never needing to come up with class names.** No more `header-btn` or `header-nav-dropdown`. Simply think up the styles you want and add the Tailwind classes directly. The context switch between the markup and the CSS file is enough of a pain point for me.\n- **The CSS styles are tied to each component.** If you remove a component, the styles go with it. Not only does that remove dead code, but could also reduce the bundle size as Tailwind purges unused utility classes.\n\nI think Tailwind is worth trying out. It's pretty fun to use even if it looks a little ugly at first. Here are a couple tips to help you get going:\n\n- If you find yourself repeating classes across multiple parts of your site, you likely need to build smaller components - a good practice in general.\n- Use the [Tailwind VS Code extension](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss) to have an auto suggestion feature for Tailwind classes.","src/content/blog/tailwind-favourite-way-to-style/index.mdx","2f1adc9e4e0c8a69","tailwind-favourite-way-to-style/index.mdx"]